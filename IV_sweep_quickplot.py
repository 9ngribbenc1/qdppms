# This script quickly plots data files generated by pymeasure and other scripts.


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.stats import linregress
import os
import glob


def veven_v_H(H, a, k, d):

    return a / (H-k) - d

def cubic_resistance(I, a, b, c, d):

    return a*I**3 + b*I**2 + c*I + d

class AsymDeltaMeas:

    def __init__(filename):
        pass

    def read_overview_file(self, filename):

        self.data = pd.read_csv(filename, skiprows=26, engine='python')

        self.data['even'] = (self.data['V+ 1'] + self.data['V- 1'])/2.
        self.data['odd'] = (self.data['V+ 1'] - self.data['V- 1'])/2.

    def shh_fit_highH(self, function, cutoff):

        self.params, pcov = curve_fit(function, 
                                 self.data['\g(m)\-(0)H'].loc[:cutoff], 
                                 self.data['even'].loc[:cutoff])

        print('params are ', self.params)

        self.data['fit'] = veven_v_H(self.data['\g(m)\-(0)H'], *self.params)

        plt.plot(self.data[r'\g(m)\-(0)H'], self.data['even'])
        plt.plot(self.data[r'\g(m)\-(0)H'], self.data['fit'])
        plt.show()


class IVMeas:

    def __init__(self):
        pass

    def readfiles(self, posid, negid):
        flistn = glob.glob(negid)
        flistp = glob.glob(posid)

        self.neg_files = []
        for f in flistn:
            self.neg_files.append(pd.read_csv(f, sep='\t', engine='python'))

        self.pos_files = []
        for f in flistp:
            self.pos_files.append(pd.read_csv(f, sep='\t', engine='python'))

        print(self.neg_files[0].head())
        #print(self.neg_files[0].loc[:,'Voltage'])


    def find_quad(self):

        length = len(self.pos_files)
        print(length, type(length))
        self.volts_pos = np.zeros(len(self.pos_files[0]))
        for df in self.pos_files:
            self.volts_pos += df.loc[:,'Voltage']/length

        length = len(self.neg_files)
        self.volts_neg = np.zeros(len(self.neg_files[0]))
        for df in self.neg_files:
            self.volts_neg += df.loc[:,'Voltage']/length

        #self.res, self.offset, r, p, s = linregress(
        #                    self.neg_files[0].loc[:,'Current'],
        #                    volts)

        self.params_pos, pcov = curve_fit(cubic_resistance, 
                                self.pos_files[0].loc[:,'Current'],
                                self.volts_pos)

        self.params_neg, pcov = curve_fit(cubic_resistance, 
                                self.neg_files[0].loc[:,'Current'],
                                self.volts_neg)

        self.volts_lin_pos = (self.volts_pos
                     - (self.pos_files[0].loc[:,'Current']**3)*self.params_pos[0] 
                     - (self.pos_files[0].loc[:,'Current']**1)*self.params_pos[2] 
                     - self.params_pos[3])

        self.volts_lin_neg = (self.volts_neg 
                     - (self.neg_files[0].loc[:,'Current']**3)*self.params_neg[0] 
                     - (self.neg_files[0].loc[:,'Current']**1)*self.params_neg[2] 
                     - self.params_neg[3])

        self.volts_lin_pos3 = (self.pos_files[3].loc[:,'Voltage'] 
                     - (self.pos_files[3].loc[:,'Current']**3)*self.params_pos[0] 
                     - (self.pos_files[3].loc[:,'Current']**1)*self.params_pos[2] 
                     - self.params_pos[3])

        self.volts_quad = (self.volts_lin_pos - self.volts_lin_neg)/2.

        #plt.plot(self.pos_files[3].loc[:,'Current'], 
        #         self.volts_lin_pos3, 'b')
        #plt.plot(self.pos_files[3].loc[:,'Current'], 
        #         self.pos_files[3].loc[:,'Voltage'], 'k')
        plt.plot(self.pos_files[0].loc[:,'Current'], self.volts_lin_pos, 'k')
        plt.plot(self.neg_files[0].loc[:,'Current'], self.volts_lin_neg, 'g')
        plt.plot(self.neg_files[0].loc[:,'Current'], self.volts_quad, 'b')

        plt.show()


def main():

    directory = (r"R:\Lab Member Files\Tony Edgeton\Raw Data\Transport"
                 r"\PPMS\B028\220820\300K_IVs")
    os.chdir(directory)

    filename = 'Delta_asym_2.5mA_300K_8kOe_90deg_B028_0.csv'

    """
    # For Delta_asym files
    measurement = AsymDeltaMeas()
    Emeasurement.read_overview_file(filename)
    print(measurement.data.head())
    measurement.shh_fit_highH(veven_v_H, 80)
    """

    # For individual IV sweep files
    measurement = IVMeas()
    measurement.readfiles('IV*_4500*.txt', 'IV*_-4500*.txt')
    measurement.find_quad()
    #flistn = glob.glob('IV*-2600*.txt')
    #flistp = glob.glob('IV*2600*.txt')





if __name__ == "__main__":
    main()
