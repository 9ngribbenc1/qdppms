# This script quickly plots data files generated by pymeasure and other scripts.


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.stats import linregress
import os
import glob

import utensils.re_values as ur
import utensils.data_reduce as ud


def veven_v_H(H, a, k, d):

    return a / (H-k) - d

def cubic_resistance(I, a, b, c, d):

    return a*I**3 + b*I**2 + c*I + d

def quintic_resistance(I, a, b, c, d, e, f):

    return a*I**5 + b*I**4 + c*I**3 + d*I**2 + e*I + f

def quadratic_sot(I, a):

    return a*I**2


def make_big_plot(x, ys):


    fig, ((ax1, ax2, ax3),
          (ax4, ax5, ax6),
          (ax7, ax8, ax9)) = plt.subplots(3,3,  sharex = True, sharey = True)
    fig.suptitle('Even Current contribution')
    ax1.plot(x, ys[0].volts_quad)
    ax1.plot(x, ys[0].volts_fit)
    ax1.set_title('3.0 kOe')
    ax1.set_ylabel('Voltage (V)')
    ax2.plot(x, ys[1].volts_quad)
    ax2.plot(x, ys[1].volts_fit)
    ax2.set_title('3.5 kOe')
    ax3.plot(x, ys[2].volts_quad)
    ax3.plot(x, ys[2].volts_fit)
    ax3.set_title('4.0 kOe')
    ax4.plot(x, ys[3].volts_quad)
    ax4.plot(x, ys[3].volts_fit)
    ax4.set_title('4.5 kOe')
    ax4.set_ylabel('Voltage (V)')
    ax5.plot(x, ys[4].volts_quad)
    ax5.plot(x, ys[4].volts_fit)
    ax5.set_title('5.0 kOe')
    ax6.plot(x, ys[5].volts_quad)
    ax6.plot(x, ys[5].volts_fit)
    ax6.set_title('5.5 kOe')
    ax7.plot(x, ys[6].volts_quad)
    ax7.plot(x, ys[6].volts_fit)
    ax7.set_title('6.0 kOe')
    ax7.set_xlabel('Current (A)')
    ax7.set_ylabel('Voltage (V)')
    ax8.plot(x, ys[7].volts_quad)
    ax8.plot(x, ys[7].volts_fit)
    ax8.set_title('7.0 kOe')
    ax8.set_xlabel('Current (A)')
    ax9.plot(x, ys[8].volts_quad)
    ax9.plot(x, ys[8].volts_fit)
    ax9.set_title('8.0 kOe')
    ax9.set_xlabel('Current (A)')
 
    plt.show()


def bso_v_field(B, a, K, s):
    
    return a/(B-K) + s

def main():

    directory = (r"R:\Lab Member Files\Tony Edgeton\Raw Data\Transport"
                 r"\PPMS\B028\dev10.8\220919\300K_IVs_90deg_2")
    os.chdir(directory)

    filename = 'Delta_asym_2.5mA_300K_8kOe_90deg_B028_1.csv'

    """
    # For Delta_asym files
    measurement = AsymDeltaMeas()
    Emeasurement.read_overview_file(filename)
    print(measurement.data.head())
    measurement.shh_fit_highH(veven_v_H, 80)
    """

    # For individual IV sweep files
    '''
    pos_ids = ['IV*_3000*.txt', 'IV*_3231*.txt', 'IV*_3462*.txt', 
               'IV*_3693*.txt', 'IV*_3923*.txt', 'IV*_4154*.txt',
               'IV*_4385*.txt', 'IV*_4615*.txt', 'IV*_4846*.txt',
               'IV*_5077*.txt', 'IV*_5308*.txt', 'IV*_5539*.txt',
               'IV*_5770*.txt', 'IV*_5999*.txt', 'IV*_6231*.txt',
               'IV*_6462*.txt', 'IV*_6693*.txt', 'IV*_6923*.txt',
               'IV*_7154*.txt', 'IV*_7385*.txt', 'IV*_7616*.txt',
               'IV*_7846*.txt', 'IV*_8077*.txt', 'IV*_8308*.txt', 
               'IV*_8539*.txt', 'IV*_8770*.txt', 'IV*_9000O*.txt']

    '''

    # Field Sweep
    indices = pd.read_csv('field_vals.txt', sep='\t', engine='python')
    print(indices.head())
    pos_ids = []
    neg_ids = []
    for i in range(len(indices)):
        pos_ids.append('IV*_{0:.0f}Oe*.txt'.format(indices.iloc[i,0]))
        neg_ids.append('IV*_{0:.0f}Oe*.txt'.format(indices.iloc[i,1]))
    print(pos_ids)
    '''
    
    # Angular Sweep
    indices = pd.read_csv('angle_vals.txt', sep='\t', engine='python')
    print(indices.head())
    print(indices.angle[0])
    ids = []
    for i in range(len(indices)):
        ids.append('IV*_{0:.0f}deg*.txt'.format(indices.angle[i]))
    print(ids)

    '''

 
    #to_plot = [0, 3, 6, 9, 12, 15, 18, 22, 26]
    #to_plot = [0, 1, 2, 3, 4, 5, 6, 8, 10]
    #to_plot = [0, 1, 2, 3, 4, 6, 8, 10, 13] # _0, 100K
    #to_plot = [0, 3, 6, 9, 12, 15, 18, 22, 26] # _1 10K
    to_plot = [0, 1, 2, 3, 4, 6, 8, 10, 13] # _1 100K
    #measurement = []
    #flds = []
    #curvs = []

    measurement = ud.IVFieldSweep()
    #measurement.one_field(pos_ids[24], neg_ids[24])

    for i in range(len(pos_ids)):
        measurement.one_field(pos_ids[i], neg_ids[i])

    #params, pcov = curve_fit(bso_v_field, flds, curvs, [-1800., 2400., 3.e-6])

    
    #measurement.make_big_plot(to_plot)
    measurement.fit_field(True)
    measurement.write_summary_file('IVs_300K_02_90deg_summary.txt')

    #flistn = glob.glob('IV*-2600*.txt')
    #flistp = glob.glob('IV*2600*.txt')
    #plt.plot(flds, curvs)
    #plt.plot(flds, bso_v_field(flds, *params))
    #plt.show()





if __name__ == "__main__":
    main()
